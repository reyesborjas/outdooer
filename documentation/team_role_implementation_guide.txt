# TeamRolePermissions Implementation Guide

This guide explains how to implement the `team_role_permissions` table and related functionality in the Outdooer backend API.

## Background

The SQL schema requires a `team_role_permissions` table for storing team-specific role permissions, but the current implementation is using a different approach with `TeamRoleConfiguration`. This implementation fixes the issue by:

1. Creating a proper `TeamRolePermissions` model aligned with the SQL schema
2. Updating existing permission checking logic to use the new model
3. Providing tools for migrating existing data
4. Implementing endpoints for managing team-specific permissions

## Changes Overview

### New Models

- `TeamRolePermissions`: Team-specific permissions for different role levels
- Updated `TeamRoleConfiguration`: Global default permissions for all teams

### Modified Services

- `PermissionService`: Updated to check both team-specific and global permissions
- `setup_role_configurations.py`: Now handles both global and team-specific configurations

### Modified Middleware

- `check_role_permission`: Updated to check permissions from both sources

### New Endpoints

- `/api/permissions/team/<team_id>/permissions` (GET/POST): For viewing and updating team permissions

## Implementation Steps

1. **Create the new `team_role_permissions` table:**
   
   Run the migration script:
   ```
   python -m migrations.add_team_role_permissions
   ```

2. **Replace existing files with the updated versions:**

   - `app/models/team.py`
   - `app/models/team_role_configuration.py`
   - `app/models/team_role_permissions.py` (new)
   - `app/services/permission_service.py`
   - `app/middleware/permissions.py`
   - `app/scripts/setup_role_configurations.py`
   - `app/api/permissions/routes.py`
   - `app/models/__init__.py`

3. **Sync permissions for all teams:**

   Send a POST request to `/api/permissions/sync-permissions` as an admin user to initialize the permissions for all teams.

## Database Schema

The `team_role_permissions` table has the following structure:

```sql
CREATE TABLE public.team_role_permissions
(
    permission_id serial NOT NULL,
    team_id integer REFERENCES teams(team_id),
    role_level integer NOT NULL,
    permission_key character varying(100) NOT NULL,
    is_enabled boolean DEFAULT false,
    modified_by integer REFERENCES users(user_id),
    modified_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT team_role_permissions_pkey PRIMARY KEY (permission_id),
    CONSTRAINT unique_team_role_permission UNIQUE (team_id, role_level, permission_key)
);
```

## Permission Hierarchy

1. Team-specific permissions (`TeamRolePermissions`) take precedence when defined
2. Global role configurations (`TeamRoleConfiguration`) are used as fallback
3. Special handling exists for Technical Guides (Level 3) to update their own activities/expeditions

## Using Team Permissions in Your Code

```python
from app.services.permission_service import PermissionService

# Check if a user can perform an operation
has_permission, role_level, error_message = PermissionService.check_permission(
    user_id=current_user_id,
    team_id=team_id,
    permission_key='create_activity'
)

if not has_permission:
    return jsonify({'error': error_message}), 403

# Proceed with operation
```

## API Documentation

### GET /api/permissions/team/{team_id}/permissions

Returns permission settings for a specific team.

**Authentication:** Required  
**Authorization:** User must be a Master Guide or Tactical Guide in the team

**Response:**
```json
{
  "team_id": 1,
  "team_name": "Alpine Explorers",
  "role_names": {
    "1": "Master Guide",
    "2": "Tactical Guide",
    "3": "Technical Guide",
    "4": "Base Guide"
  },
  "permissions": {
    "1": {
      "create_expedition": true,
      "update_expedition": true,
      "delete_expedition": true,
      ...
    },
    "2": { ... },
    "3": { ... },
    "4": { ... }
  },
  "can_edit": true
}
```

### POST /api/permissions/team/{team_id}/permissions

Updates permission settings for a specific team.

**Authentication:** Required  
**Authorization:** User must be a Master Guide in the team

**Request:**
```json
{
  "permissions": {
    "2": {
      "create_expedition": true,
      "delete_activity": false
    },
    "3": {
      "create_activity": true
    }
  }
}
```

**Response:**
```json
{
  "message": "Successfully updated 3 team permissions",
  "team_id": 1,
  "updated_count": 3
}
```