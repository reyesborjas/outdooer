# Understanding and Configuring Outdooer Role-Based Permissions

This guide explains the role-based permission system in Outdooer and the fixes implemented to address permission issues with team members at different levels.

## Role Hierarchy in Outdooer

Outdooer uses a hierarchical role system with four levels of guides:

1. **Master Guide (Level 1)** - Team owner with highest authority
2. **Tactical Guide (Level 2)** - Team administrator with extensive permissions
3. **Technical Guide (Level 3)** - Specialized guide with limited management permissions
4. **Base Guide (Level 4)** - Entry-level guide with minimal permissions

## Permission System Architecture

The permission system consists of:

1. **Global Permissions** - Default permission settings for each role level
2. **Team-Specific Permissions** - Custom permission settings that can override global defaults for each team

Permissions are stored in the `team_role_permissions` table with these key fields:
- `team_id` - NULL for global permissions, or the specific team ID
- `role_level` - The guide level (1-4)
- `permission_key` - The specific operation (e.g., 'create_expedition')
- `is_enabled` - Boolean flag indicating if the permission is granted

## Fixed Permission Issues

We've addressed several issues with the permission configuration:

1. **Expedition Management**
   - Only Master Guides (Level 1) and Tactical Guides (Level 2) can create expeditions
   - Technical Guides (Level 3) and Base Guides (Level 4) cannot create or update expeditions
   - Technical Guides *can* update expeditions they created or lead (special case)

2. **Activity Management**
   - All guide levels can create and update their own activities
   - Only Master Guides can delete activities
   - Technical/Base Guides have activity permissions but not expedition permissions

3. **Team Management**
   - Only Master Guides can manage team settings
   - Tactical Guides can manage team members but not team settings
   - Lower guide levels cannot manage team aspects

## Permission Check Logic

We've enhanced the permission check logic in two key components:

1. **PermissionService** - Central service for permission checks with special case handling
2. **ExpeditionController** - Controller-specific permission enforcement

The new logic:
- First checks team-specific permissions
- Falls back to global permissions if no team-specific rule exists
- Handles special cases (e.g., Technical Guides updating their own expeditions)

## Resetting and Updating Permissions

Use the new `reset_permissions.py` script to:
- Reset all permissions to the corrected defaults
- Update permissions for a specific team
- Fix any permission inconsistencies in the database

### Usage:

```bash
# Reset all permissions (global and team-specific)
python reset_permissions.py

# Reset permissions for a specific team
python reset_permissions.py --team-id 1
```

## Permission Keys Reference

The following permission keys are used in the system:

| Permission Key | Description |
|----------------|-------------|
| `create_expedition` | Create new expeditions |
| `update_expedition` | Modify existing expeditions |
| `delete_expedition` | Delete expeditions |
| `create_activity` | Create new activities |
| `update_activity` | Modify existing activities |
| `delete_activity` | Delete activities |
| `manage_team` | Manage team settings |
| `manage_team_members` | Manage team member roster |
| `manage_resources` | Manage team resources |
| `manage_revenue` | Manage revenue and financial aspects |

## Default Permission Configuration

Here's the default permission configuration for each role level:

### Master Guide (Level 1)
- All permissions enabled (`TRUE`)

### Tactical Guide (Level 2)
- `create_expedition`: **TRUE**
- `update_expedition`: **TRUE**
- `delete_expedition`: **FALSE**
- `create_activity`: **TRUE**
- `update_activity`: **TRUE**
- `delete_activity`: **FALSE**
- `manage_team`: **FALSE**
- `manage_team_members`: **TRUE**
- `manage_resources`: **TRUE**
- `manage_revenue`: **FALSE**

### Technical Guide (Level 3)
- `create_expedition`: **FALSE**
- `update_expedition`: **FALSE** (but can update own expeditions)
- `delete_expedition`: **FALSE**
- `create_activity`: **TRUE**
- `update_activity`: **TRUE**
- `delete_activity`: **FALSE**
- `manage_team`: **FALSE**
- `manage_team_members`: **FALSE**
- `manage_resources`: **TRUE**
- `manage_revenue`: **FALSE**

### Base Guide (Level 4)
- `create_expedition`: **FALSE**
- `update_expedition`: **FALSE**
- `delete_expedition`: **FALSE**
- `create_activity`: **TRUE**
- `update_activity`: **TRUE** (own activities only)
- `delete_activity`: **FALSE**
- `manage_team`: **FALSE**
- `manage_team_members`: **FALSE**
- `manage_resources`: **FALSE**
- `manage_revenue`: **FALSE**

## Customizing Permissions

Team-specific permissions can be customized through the admin interface. The database design allows for flexibility while maintaining the core permission model.

This approach:
- Maintains a clear role hierarchy
- Allows for team-specific customizations
- Handles special cases like users managing their own created content
- Makes permission checks consistent throughout the application