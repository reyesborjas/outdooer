# Outdooer Backend Setup and Import Resolution Guide

This guide will help you fix the import resolution issues and properly set up the Outdooer backend application.

## 1. Updated Project Structure

Make sure your project follows this structure:

```
outdooer-backend/
├── app/
│   ├── __init__.py                # Initialize app package
│   ├── app.py                     # Main application factory
│   ├── database.py                # Database configuration
│   ├── api/
│   │   ├── __init__.py
│   │   ├── activities/
│   │   ├── auth/
│   │   ├── expeditions/
│   │   ├── permissions/
│   │   │   ├── __init__.py        # Blueprint definition
│   │   │   └── routes.py          # Routes with updated imports
│   │   └── teams/
│   ├── middleware/
│   │   ├── __init__.py            # Import check_role_permission
│   │   └── permissions.py         # Permission middleware
│   ├── models/
│   │   ├── __init__.py
│   │   ├── team_role_configuration.py  # New model
│   │   └── other models...
│   ├── scripts/
│   │   ├── __init__.py
│   │   └── setup_role_configurations.py
│   └── services/
│       ├── __init__.py            # Import PermissionService
│       └── permission_service.py  # Updated imports
├── run.py                         # Entry point script
└── other files...
```

## 2. Fix Import Errors

### Create Missing Files

1. Replace `app/appy.py` with the new `app/app.py`
2. Create or update all necessary `__init__.py` files
3. Create the `app/models/team_role_configuration.py` file
4. Update the permissions middleware in `app/middleware/permissions.py`
5. Create a root-level `run.py` file

### Fix Import Statements

1. Use **absolute imports** with the `app` prefix:
   - Replace `from models.team_role_configuration import TeamRoleConfiguration` with `from app.models.team_role_configuration import TeamRoleConfiguration`
   - Replace `from database import db` with `from app.database import db`

2. Ensure blueprint imports are correct:
   - In `app/api/permissions/__init__.py`, define the permissions blueprint
   - In `app/api/permissions/routes.py`, import the blueprint from the `__init__.py` file

3. Update all service imports:
   - In `app/services/permission_service.py`, use absolute imports for all models
   - In `app/scripts/setup_role_configurations.py`, use absolute imports

## 3. Running the Application

After fixing the import issues, you can run the application using the `run.py` file:

```bash
python run.py
```

## 4. Troubleshooting Common Issues

### Import Error: "Cannot Import Name"

If you receive errors like "cannot import name 'X' from 'Y'", it's usually because:

1. The module exists but the class/function isn't defined in it
2. There are circular imports

Solution:
- Check that the class is actually defined in the module
- Restructure imports to avoid circular dependencies
- Use string-based imports for circular dependencies

### ModuleNotFoundError

If you see "No module named 'X'", it means Python can't find the module in the path:

Solution:
- Make sure all directories have `__init__.py` files
- Use absolute imports with the `app` prefix
- Set PYTHONPATH environment variable if needed:
  ```bash
  export PYTHONPATH=/path/to/outdooer-backend:$PYTHONPATH
  ```

### Database Connection Issues

If you have problems connecting to the database:

1. Check database credentials in your config file
2. Ensure PostgreSQL server is running
3. Run the `test_db_connection.py` script

## 5. Best Practices Going Forward

1. **Always use absolute imports** - Start imports with `app.` to avoid path resolution issues
2. **Create `__init__.py` files** for all packages and subpackages
3. **Centralize models** - Keep consistent field naming and relationships
4. **Blueprint organization** - Keep related files in the same module

## 6. Advanced Setup (Optional)

### Setting up pre-commit hooks

You can set up a pre-commit hook to check for import errors before committing:

```bash
pip install pre-commit
```

Create a `.pre-commit-config.yaml` file:

```yaml
repos:
-   repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
    -   id: trailing-whitespace
    -   id: end-of-file-fixer
-   repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
    -   id: isort
-   repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
    -   id: flake8
```

Install the hooks:

```bash
pre-commit install
```

This will check your code for import issues before committing.

## 7. Testing Your Changes

After implementing all fixes, test the following functionality:

1. User authentication
2. Expedition creation, viewing, and deletion
3. Permission checks for different user roles
4. Overall API functionality

If any issues persist, check the application logs for detailed error messages.