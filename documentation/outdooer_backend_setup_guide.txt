# Outdooer Backend - Troubleshooting and Fixes Guide

This guide explains the fixes needed to resolve the errors in the Outdooer backend application and provides instructions for deploying it successfully.

## üîç Issues Identified and Fixed

Based on the error message when running `db_setup.py`, we identified several critical issues:

1. **Circular Imports and Relationship Conflicts**
   - The most critical error was in the relationship between `Team` and `TeamRoleConfiguration` models
   - Both models were trying to define a backref named 'team', causing SQLAlchemy conflicts

2. **Model Relationship Inconsistencies**
   - Several models had inconsistent relationship definitions
   - Some relationships used `backref` while others used `back_populates`

3. **Flask Extension Initialization**
   - Extensions were not being initialized properly or consistently
   - Missing proper initialization for Marshmallow

4. **Configuration and Setup Issues**
   - The application structure had circular dependencies
   - Database initialization was not robust against errors

## üõ†Ô∏è Files Fixed

The following files have been fixed or created to resolve these issues:

1. **Model Relationship Fixes**
   - `app/models/team.py` - Fixed relationship definitions
   - `app/models/team_role_configuration.py` - Fixed backref conflict
   - `app/models/user.py` - Updated relationship consistency
   - `app/models/audit_log.py` - Fixed relationships

2. **Application Structure Fixes**
   - `app/__init__.py` - Improved create_app function with error handling
   - `app/extensions.py` - Created proper extensions module
   - `app/database.py` - Updated to import from extensions

3. **Setup and Initialization**
   - `db_setup.py` - Completely reworked for robust database setup
   - `run.py` - Enhanced with better error handling

## üöÄ How to Run the Application

Follow these steps to get the application running properly:

### 1. Set Up Environment

Create a `.env` file in the project root with the following settings:

```
FLASK_APP=run.py
FLASK_ENV=development
SECRET_KEY=your-secret-key
JWT_SECRET_KEY=your-jwt-secret

# Database connection
DB_USER=postgres
DB_PASSWORD=123456789
DB_HOST=localhost
DB_PORT=5434
DB_NAME=outdooer
```

### 2. Install Dependencies

Make sure all required packages are installed:

```bash
pip install -r requirements.txt
```

### 3. Initialize the Database

Run the improved database setup script:

```bash
# To initialize with a fresh database
python db_setup.py --reset

# To add sample data for development
python db_setup.py --reset --sample-data
```

### 4. Start the Application

Run the application:

```bash
python run.py
```

The server will be available at http://localhost:5000/

## üîß Database Schema Management

The database schema is now properly managed by SQLAlchemy based on the model definitions. If you need to make changes to the schema:

1. Update the model classes in the `app/models/` directory
2. Run `python db_setup.py --reset` to recreate the tables

For more advanced schema migrations, consider implementing Flask-Migrate.

## üë• Default Users

When setting up the database with sample data, the following users are created:

| Email | Password | Role |
|-------|----------|------|
| admin@outdooer.com | admin123 | Admin |
| user1@example.com | password1 | Master Guide (Alpine Explorers) |
| user2@example.com | password2 | Master Guide (Canyon Adventures) |
| user3@example.com | password3 | Tactical Guide |
| user4@example.com | password4 | Base Guide |
| user5@example.com | password5 | Technical Guide |

## üîç Debugging

If you encounter issues:

1. Check the console logs for error messages
2. Ensure PostgreSQL is running and accessible
3. Verify that all models have been updated with the fixed relationships
4. Use the `--debug` flag when running the application:
   ```bash
   python run.py --debug
   ```

## üìã API Documentation

Once the application is running, you can access the following endpoints:

- Health Check: `GET /api/health`
- Authentication: `POST /api/auth/login` and `POST /api/auth/register`
- Activities: `GET /api/activities/`
- Teams: `GET /api/teams/my-teams`

For a complete list of endpoints, refer to the original README.md documentation.

## üîí Security Notes

- The default admin password should be changed immediately after first login
- All passwords are hashed using Werkzeug's security functions
- JWT tokens are used for authentication and expire after 1 hour by default

## üìö Additional Resources

For more information, refer to the following resources:

- Flask Documentation: [https://flask.palletsprojects.com/](https://flask.palletsprojects.com/)
- SQLAlchemy Documentation: [https://docs.sqlalchemy.org/](https://docs.sqlalchemy.org/)
- PostgreSQL Documentation: [https://www.postgresql.org/docs/](https://www.postgresql.org/docs/)