# Outdooer Backend Setup Guide

This guide will help you set up and run the Outdooer backend API application after the import fixes have been implemented.

## Prerequisites

- Python 3.8+ installed
- PostgreSQL 13+ installed and running
- pip (Python package manager)

## Setup Steps

### 1. Set Up Environment Variables

Create a `.env` file in the project root directory with the following content:

```
# Flask configuration
FLASK_ENV=development
SECRET_KEY=your-secret-key-change-in-production
JWT_SECRET_KEY=jwt-secret-key-change-in-production

# Database configuration
DB_USER=postgres
DB_PASSWORD=123456789
DB_HOST=localhost
DB_PORT=5434
DB_NAME=outdooer
```

Adjust the values according to your PostgreSQL configuration.

### 2. Install Dependencies

Install the required Python packages:

```bash
pip install -r requirements.txt
```

### 3. Test Database Connection

Ensure PostgreSQL is running, then run the database connection test script:

```bash
python test_db_connection.py
```

This script will connect to PostgreSQL and create the `outdooer` database if it doesn't exist.

### 4. Initialize the Database

Initialize the database with the required tables and initial data:

```bash
python -m app.scripts.init_db --sample-data
```

The `--sample-data` flag is optional and adds sample data for development testing.

### 5. Run the Server

Start the Outdooer backend server:

```bash
python run.py
```

The API will be accessible at `http://localhost:5000/`.

To check if the server is running properly, open a browser or use curl to access the health check endpoint:

```bash
curl http://localhost:5000/api/health
```

You should see a response like:
```json
{"status": "ok", "message": "outdooer API is running"}
```

## Common Issues and Solutions

### Import Errors

If you encounter import errors despite the fixes:

- Ensure all files have been updated according to the changes
- Check for any circular imports that might not have been caught
- Make sure all required `__init__.py` files exist in each directory

### Database Connection Issues

If the database connection fails:

- Verify PostgreSQL is running
- Double-check your database credentials in the `.env` file
- Ensure the PostgreSQL port is correct (default is usually 5432, but we're using 5434)

### Permission Errors

If you get permission errors when running the application:

- Ensure you have the necessary permissions to create and modify files
- Check PostgreSQL user permissions for creating databases

## API Testing

Once the server is running, you can test API endpoints using tools like [Postman](https://www.postman.com/) or [curl](https://curl.se/).

Example API test with curl:

```bash
# Login
curl -X POST http://localhost:5000/api/auth/login \
     -H "Content-Type: application/json" \
     -d '{"email": "admin@outdooer.com", "password": "admin123"}'
```

This should return an access token if authentication is successful.

## Debugging Tips

If you encounter issues:

1. Check the Flask server logs for detailed error messages
2. Use `print()` statements in problematic code sections to trace execution
3. Look for error patterns (database errors, import issues, etc.)
4. Verify the structure of your models and table definitions