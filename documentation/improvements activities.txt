To properly implement the similar activities feature in your `NewExpedition.jsx` file, you need to add the necessary state variables and API call logic. Here's how to integrate it:

1. First, add the missing state variables at the top of your component:

```jsx
// Add these with your other state variables
const [similarActivities, setSimilarActivities] = useState([]);
const [checkingSimilar, setCheckingSimilar] = useState(false);
```

2. Import the SimilarActivityWarning component:

```jsx
import SimilarActivityWarning from '../components/SimilarActivityWarning';
```

3. Add a function to check for similar activities when an activity is selected:

```jsx
// Add this function to your component
const checkSimilarActivities = async (activityId) => {
  if (!activityId) return;
  
  setCheckingSimilar(true);
  try {
    const response = await api.get(`/activities/${activityId}/similar`);
    if (response.data && response.data.similar_activities) {
      setSimilarActivities(response.data.similar_activities);
    }
  } catch (err) {
    console.error('Error checking for similar activities:', err);
    setSimilarActivities([]);
  } finally {
    setCheckingSimilar(false);
  }
};
```

4. Modify your `handleAddActivity` function to check for similar activities:

```jsx
const handleAddActivity = (activityId) => {
  const activity = availableActivities.find(act => act.activity_id === Number(activityId));
  
  if (activity && !selectedActivities.some(a => a.activity_id === activity.activity_id)) {
    // Check for similar activities when adding a new one
    checkSimilarActivities(activityId);
    
    setSelectedActivities(prev => [
      ...prev, 
      { 
        ...activity, 
        sequence_order: prev.length + 1,
        day_number: 1
      }
    ]);
  }
};
```

5. Add the SimilarActivityWarning component to your JSX, below the activity selection section:

```jsx
{/* Add this after your selected activities list */}
{checkingSimilar ? (
  <div className="text-center my-3">
    <Spinner animation="border" size="sm" /> Checking for similar activities...
  </div>
) : (
  <SimilarActivityWarning similarActivities={similarActivities} />
)}
```

6. Make sure you have a backend endpoint to support this functionality. Add this to your Flask routes:

```python
# app/api/activities/routes.py

@activities_bp.route('/<int:activity_id>/similar', methods=['GET'])
def get_similar_activities(activity_id):
    """Get activities similar to the specified one"""
    try:
        activity = Activity.query.get_or_404(activity_id)
        
        # Find activities with the same type and location
        similar = Activity.query.filter(
            Activity.activity_id != activity_id,
            Activity.team_id == activity.team_id,
            Activity.activity_type_id == activity.activity_type_id,
            Activity.location_id == activity.location_id
        ).all()
        
        similar_activities = []
        for s in similar:
            similar_activities.append({
                'activity_id': s.activity_id,
                'title': s.title,
                'difficulty_level': s.difficulty_level,
                'price': float(s.price) if s.price else 0,
            })
        
        return jsonify({
            'similar_activities': similar_activities
        }), 200
    except Exception as e:
        print(f"Error finding similar activities: {str(e)}")
        return jsonify({'error': 'Failed to find similar activities'}), 500
```

The above implementation:

1. Adds the necessary state variables to track similar activities
2. Checks for similar activities whenever a new activity is added to an expedition
3. Displays a warning component if similar activities are found
4. Provides a backend endpoint to support the feature

This approach helps users identify potential duplicates when building expeditions, while still allowing them to proceed with their selection if needed.